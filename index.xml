<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>michael s.</title>
    <link>https://michaelsprindzuikate.github.io/</link>
    <description>Recent content on michael s.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Dec 2021 12:00:00 +0000</lastBuildDate><atom:link href="https://michaelsprindzuikate.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Festive Development</title>
      <link>https://michaelsprindzuikate.github.io/posts/a-festive-development/</link>
      <pubDate>Wed, 01 Dec 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/a-festive-development/</guid>
      <description>&amp;lsquo;Twas the night before Christmas, when all through the house
Not a creature was stirring, not even a mouse;
Except, there was one person, sat at his desk
Asking &amp;ldquo;why won&amp;rsquo;t this compile, I&amp;rsquo;m getting depressed&amp;rdquo;;
 In the spirit of the season, why not add a little festive cheer to your apps with a little Snowglobe class that you can add to your view heirarchy!
  Look! It&amp;#39;s snowing!</description>
    </item>
    
    <item>
      <title>Negative Thinking</title>
      <link>https://michaelsprindzuikate.github.io/posts/negative-thinking/</link>
      <pubDate>Mon, 25 Oct 2021 10:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/negative-thinking/</guid>
      <description>It&amp;#39;s a knot. It&amp;#39;ll all make sense in a minute, I promise.  You should know me by now, I like to weave a story, set the scene and/or derail a train of thought before it&amp;rsquo;s left the station.
Anyway, oftentimes when developing we are faced with a teaser that stops us in our tracks, if even ever so briefly. It will be around logical operations and usually the sentence that enters our mind will be something like:</description>
    </item>
    
    <item>
      <title>JSON and the Custom Decoding Strategy </title>
      <link>https://michaelsprindzuikate.github.io/posts/json-custom-key-decoding/</link>
      <pubDate>Sun, 19 Sep 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/json-custom-key-decoding/</guid>
      <description>I wasn&amp;#39;t sure how to represent JSON in a metaphorical way, so here&amp;#39;s a nice picture of the countryside instead.  For anyone that&amp;rsquo;s been using Swift since version 4, then you will almost certainly made use of the codable protocol in order to encode and/or decode JSON into data models. In its simplest terms, by adopting decodable on your class or struct allows your data to be parsed and mapped with minimal effort.</description>
    </item>
    
    <item>
      <title>Seniority Complex</title>
      <link>https://michaelsprindzuikate.github.io/posts/seniority-complex/</link>
      <pubDate>Sun, 01 Aug 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/seniority-complex/</guid>
      <description>PR review? I&amp;#39;ll be there in a minute...  Occasionally on those warm summer evenings, before the sun has set behind the garden fence, the bees visiting one last flower in a long day&amp;rsquo;s work, the clouds casting a faint memory of white across an increasingly purple sky.. I will sit on the patio and wonder to myself:
 Oh dear, I&amp;rsquo;m old.
 I&amp;rsquo;ve been adding &amp;ldquo;Senior iOS Developer&amp;rdquo; as my job title for six years now, and since my initial promotion to the role, I&amp;rsquo;ve never been that sure of what it actually means.</description>
    </item>
    
    <item>
      <title>Behind Generics: Part Two</title>
      <link>https://michaelsprindzuikate.github.io/posts/filter-tips/</link>
      <pubDate>Thu, 01 Jul 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/filter-tips/</guid>
      <description>Back in March, I dived into how the generic Map function in Swift works under the hood. There are many other useful functional&amp;hellip;erm&amp;hellip;functions in the Foundation framework that are valuable tools for us developers, which warranted a look into another favourite - Filter.
Clarify First of all, let&amp;rsquo;s see how the built-in Filter function works.
let items = [1,2,3,4,5,6,7,8] let filteredResults = items.filter { $0 &amp;gt; 4 } print(filteredResults) // output is [5,6,7,8] Like in the Map example, we see that filter takes in a parameter of a closure and returns a new collection that is a subset of the original collection.</description>
    </item>
    
    <item>
      <title>KeyPath to Enlightenment</title>
      <link>https://michaelsprindzuikate.github.io/posts/keypath-to-enlightenment/</link>
      <pubDate>Tue, 01 Jun 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/keypath-to-enlightenment/</guid>
      <description>This is a story of a promise made.
When planning a piece of work, the last thing I want to do is set an expectation that I can&amp;rsquo;t match. By now, I figure I should know iOS, UIKit, Foundation, all of it inside out. I have been doing this for a while now, you know, I should be an authority.
When I say &amp;ldquo;Sure, we can add subviews to a UITabBarItem&amp;rdquo;, I mean it.</description>
    </item>
    
    <item>
      <title>Refactoring</title>
      <link>https://michaelsprindzuikate.github.io/posts/refactoring-into-the-equation/</link>
      <pubDate>Sat, 01 May 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/refactoring-into-the-equation/</guid>
      <description>Just a little off the top, please  Over the past year, alongside our regular app releases, my team and I have been working on a new version of our app which features, amongst other things, an improved user experience to make it easier to navigate and more responsive for users.
Now, this is a project with&amp;hellip;let&amp;rsquo;s call it &amp;ldquo;heritage&amp;rdquo;. The origins date back to 2016, written in a fresh new language, Swift and with that comes the elephant in the room.</description>
    </item>
    
    <item>
      <title>It&#39;s Not Stealing, It&#39;s Research</title>
      <link>https://michaelsprindzuikate.github.io/posts/its-not-stealing-its-research/</link>
      <pubDate>Thu, 01 Apr 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/its-not-stealing-its-research/</guid>
      <description>I&amp;#39;m sure I left my copy of the OpenGL Programming Guide in here somewhere...  Genesis Back in the early 2000&amp;rsquo;s, when I was first learning how to write software, there was always one thing accompanying me on the desk next to my CRT monitor, clacky-clacky keyboard and mouse with a little rubber ball inside. It was a book.
Not always the same book, but a book nonetheless.</description>
    </item>
    
    <item>
      <title>Rewriting the Map</title>
      <link>https://michaelsprindzuikate.github.io/posts/understanding-generic-functions/</link>
      <pubDate>Mon, 01 Mar 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/understanding-generic-functions/</guid>
      <description>Not sure you can get any more generic than this  One thing I&amp;rsquo;m often asked rhetorically by imaginary colleagues with the sole purpose of providing a blog post with context is
 Generics? They&amp;rsquo;re super complicated, aren&amp;rsquo;t they?
 And my answer is most definitely
 You bet!
Well, kinda.
Well, maybe.
Well, not strictly, but I can see what you mean.
 One of the ways that it can be useful to understand and appreciate the value (some may even dare to say beauty) of generics is by taking a look at some of the built in generic functions in Swift and attempting to duplicate that same functionality ourselves.</description>
    </item>
    
    <item>
      <title>How the Coordinator Pattern Broke My Brain</title>
      <link>https://michaelsprindzuikate.github.io/posts/coordinators-brain-soup/</link>
      <pubDate>Mon, 01 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/coordinators-brain-soup/</guid>
      <description>Introduction. This was originally a presentation that I’d put together in early 2020 back before we entered a global pandemic.
So please imagine that we’re in a 80% full auditorium (I’m not greedy), the chairs are comfy and the host for the event has told some light hearted jokes to ease you into proceedings.
 “Up next is Michael to talk about Coordinators….”
 A gentle applause flutters around the room.</description>
    </item>
    
    <item>
      <title>Social Medium</title>
      <link>https://michaelsprindzuikate.github.io/posts/social-medium/</link>
      <pubDate>Tue, 26 Jan 2021 17:00:07 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/social-medium/</guid>
      <description>Likes are currently trending 0.5 percentage points over hearts this quarter  Stats Are Not My Friend Part of the motivation for me to start writing posts here under my own space is down to two things:
 I can have more control over what I post and how it looks I don’t have any analytics  Sure, it’s more complicated and time consuming to create, edit and publish new words here, and Medium.</description>
    </item>
    
    <item>
      <title>Abusing Dictionaries in Swift in Six Simple Examples</title>
      <link>https://michaelsprindzuikate.github.io/posts/dictionary-abuse/</link>
      <pubDate>Thu, 21 Jan 2021 21:20:07 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/dictionary-abuse/</guid>
      <description>This isn&amp;#39;t a picture of an egg box, it&amp;#39;s a metaphor  Example One: Simple The dictionary! A simple concept - thing has a key and a value and you use one to extract the other. Like how when you were younger, you&amp;rsquo;d use a dictionary to extract all of the swear words.
Developers use them all the time because they&amp;rsquo;re simple to understand, flexible and consistent in their behaviour.</description>
    </item>
    
    <item>
      <title>Timing Is Everything</title>
      <link>https://michaelsprindzuikate.github.io/posts/timing-is-everything/</link>
      <pubDate>Tue, 19 Jan 2021 21:23:37 +0000</pubDate>
      
      <guid>https://michaelsprindzuikate.github.io/posts/timing-is-everything/</guid>
      <description>Is this the line for putting yourself out there?  And I guess the question is &amp;ldquo;Why now?&amp;rdquo;. I&amp;rsquo;ve been loathe to start one of these things for a number of reasons and they normally fall into this order:
 What do I really have to say? Why would anyone care what I have to say? What if people don&amp;rsquo;t like/care about what I have to say? Can I be bothered to go through the effort of making a website?</description>
    </item>
    
  </channel>
</rss>
